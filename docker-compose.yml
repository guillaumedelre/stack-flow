version: "3.4"

services:
    php:
        build:
            context: .
            target: symfony_php
            args:
                SYMFONY_VERSION: ${SYMFONY_VERSION:-}
                STABILITY: ${STABILITY:-stable}
        restart: unless-stopped
        healthcheck:
            interval: 10s
            timeout: 3s
            retries: 3
            start_period: 30s
        environment:
            SYMFONY_VERSION:
        extra_hosts:
            - "git.fmm.adm.fr.clara.net:10.7.161.17"
            - "devnvm.francemm.priv:172.25.0.180"

    caddy:
        build:
            context: .
            target: symfony_caddy
        environment:
            SERVER_NAME: ${SERVER_NAME:-localhost}
        restart: unless-stopped
        ports:
            - "9080:80"
            - "9443:443"
        volumes:
            - caddy_data:/data
            - caddy_config:/config

    database:
        image: 'mariadb:latest'
        environment:
            MYSQL_ROOT_PASSWORD: password
            MYSQL_DATABASE: flow
        ports:
            # To allow the host machine to access the ports below, modify the lines below.
            # For example, to allow the host to connect to port 3306 on the container, you would change
            # "3306" to "3306:3306". Where the first port is exposed to the host and the second is the container port.
            # See https://docs.docker.com/compose/compose-file/#ports for more information.
            - '3306'
        volumes:
            - database_data:/var/lib/mysql

    ###> symfony/mercure-bundle ###
    mercure:
      # In production, you may want to use the managed version of Mercure, https://mercure.rocks
      image: dunglas/mercure
      environment:
        # You should definitely change all these values in production
        - JWT_KEY=!ChangeMe!
        - ALLOW_ANONYMOUS=1
        - CORS_ALLOWED_ORIGINS=*
        - PUBLISH_ALLOWED_ORIGINS=http://localhost:1337
        - DEMO=1
      ports:
        - "1337:80"
    ###< symfony/mercure-bundle ###

    node:
        build:
            context: ./docker/node
        working_dir: /srv/app
        volumes:
            - ./:/srv/app

volumes:
    caddy_data:
    caddy_config:
    database_data:
